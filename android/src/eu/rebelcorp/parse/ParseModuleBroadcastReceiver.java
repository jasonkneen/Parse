/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package eu.rebelcorp.parse;

import org.json.JSONObject;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.titanium.util.TiRHelper;

import android.content.Context;
import android.content.Intent;
import android.util.Log;

import com.parse.ParsePushBroadcastReceiver;

import com.parse.ParseAnalytics;

import android.os.Build;

import androidx.core.app.NotificationCompat;

public class ParseModuleBroadcastReceiver extends ParsePushBroadcastReceiver {

    @Override
    public void onPushOpen(Context context, Intent intent) {
        Intent i = context.getPackageManager().getLaunchIntentForPackage(context.getApplicationContext().getPackageName());
        ParseAnalytics.trackAppOpenedInBackground(intent);

        /* Check if the app is running or in background. If not, just start the app and add the
         * notification as Extra */
        if (ParseModule.getInstance() == null || ParseModule.getInstance().getState() == ParseModule.STATE_DESTROYED) {
            Log.d("onPushOpen", "App was killed; resume the app without triggering 'notificationopen'");
            i.putExtras(intent.getExtras());
            context.startActivity(i);
            return;
        }

        /* Otherwise, just resume the app if necessary, and trigger the event */
        try {
            KrollDict data = new KrollDict(new JSONObject(intent.getExtras().getString("com.parse.Data")));

            if (ParseModule.getInstance().getState() != ParseModule.STATE_RUNNING) {
                Log.d("onPushOpen", "App was in background; resume the app and trigger 'notificationopen'");
                context.startActivity(i);
            } else {
                Log.d("onPushOpen", "App is running in foreground; trigger 'notificationopen'");
            }

            ParseModule.getInstance().fireEvent("notificationopen", data);
        } catch (Exception e) {
            Log.d("onPushOpen", e.getMessage());
        }
    }

    @Override
    public void onPushReceive(Context context, Intent intent) {
        try {
        	if (intent == null) {
                Log.d("onPushReceive", "Receiver intent null");
                super.onPushReceive(context, intent);
                return;
            }
        	
        	JSONObject pnData = new JSONObject(intent.getExtras().getString("com.parse.Data"));
            KrollDict data = new KrollDict(pnData);

            if (ParseModule.getInstance() == null) {
                Log.d("onPushReceive", "No instance of ParseModule found");
                // silent push
                if (pnData.has("content-available") == false) {
                	super.onPushReceive(context, intent);
                }
                return;
            }
            
            if (ParseModule.getInstance().getState() != ParseModule.STATE_DESTROYED) {
                Log.d("onPushReceive", "App is in foreground; trigger event 'notificationreceive'");

                try {        
                	ParseModule.getInstance().fireEvent("notificationreceive", data);
                } catch (Exception e) {
                    Log.d("onPushReceive", e.getMessage());
                }
            } else {
                Log.d("onPushReceive", "App is not alive; 'notificationreceive' won't be triggered");
            }
            
            // silent push
            if (pnData.has("content-available") == false) {
                super.onPushReceive(context, intent);
            }
        } catch (Exception e) {
            Log.e("Push", "Exception: " + e.toString());
        }
    }

    @Override
    protected NotificationCompat.Builder getNotification(Context context, Intent intent) {
        NotificationCompat.Builder notification = super.getNotification(context, intent);

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                notification.setColor(context.getResources().getColor(TiRHelper.getResource("color.parse_notification_color")));
            }   
        } catch (Exception e){
            Log.e("Push", "Exception: " + e.toString());
        }

        return notification;
    }
}
